name: Test Suite with PDF Reports

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Run daily at 2 AM UTC

jobs:
  comprehensive-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: recipe_pass
          POSTGRES_USER: recipe_user
          POSTGRES_DB: recipes_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up database
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://recipe_user:recipe_pass@localhost:5432/recipes_db_test
      run: |
        # Initialize database schema
        python -c "from app.database import engine, Base; Base.metadata.create_all(bind=engine)"

    - name: Run comprehensive test suite
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://recipe_user:recipe_pass@localhost:5432/recipes_db_test
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "üß™ Running comprehensive test suite..."
        python run_tests_with_pdf.py

    - name: Generate test summary
      working-directory: ./backend
      if: always()
      run: |
        echo "üìä Generating test summary..."
        python view_pdf_summary.py > test_summary.txt
        cat test_summary.txt

    - name: Upload PDF test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ github.sha }}
        path: backend/test_reports/
        retention-days: 30

    - name: Upload test summary to step summary
      if: always()
      working-directory: ./backend
      run: |
        echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat test_summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìÑ **Full PDF reports available in artifacts**" >> $GITHUB_STEP_SUMMARY

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './backend/test_summary.txt';
          
          if (fs.existsSync(path)) {
            const testSummary = fs.readFileSync(path, 'utf8');
            
            const body = `## üß™ Test Results Summary
            
            \`\`\`
            ${testSummary}
            \`\`\`
            
            üìÑ **Full PDF reports available in [build artifacts](${context.payload.pull_request.html_url}/checks)**
            
            Generated by GitHub Actions on ${new Date().toISOString()}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

    - name: Fail job if tests failed
      if: always()
      working-directory: ./backend
      run: |
        # Check if any tests failed by looking at the exit code from the test run
        if [ -f "test_reports/test_data_*.json" ]; then
          FAILED_TESTS=$(python -c "
          import json
          import glob
          files = glob.glob('test_reports/test_data_*.json')
          if files:
              with open(files[-1], 'r') as f:
                  data = json.load(f)
                  print(data.get('summary', {}).get('failed', 0))
          else:
              print('0')
          ")
          
          if [ "$FAILED_TESTS" -gt 0 ]; then
            echo "‚ùå $FAILED_TESTS tests failed"
            exit 1
          else
            echo "‚úÖ All tests passed!"
          fi
        else
          echo "‚ùå No test results found"
          exit 1
        fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: comprehensive-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with Docker Compose
      run: |
        echo "üöÄ Starting services for integration testing..."
        docker-compose up -d --build
        
    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to start..."
        sleep 60
        
    - name: Test service connectivity
      run: |
        echo "üîç Testing service connectivity..."
        
        # Test backend health
        curl -f http://localhost:8000/health || exit 1
        echo "‚úÖ Backend is healthy"
        
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        echo "‚úÖ Frontend is accessible"
        
        # Test database connectivity
        docker-compose exec -T db pg_isready -U recipe_user -d recipes_db || exit 1
        echo "‚úÖ Database is ready"

    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        # Add your integration test commands here
        # For example:
        # curl -X POST http://localhost:8000/api/recipes/generate -H "Content-Type: application/json" -d '{"ingredients": ["chicken", "rice"]}'
        
    - name: Clean up
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        docker-compose down -v
